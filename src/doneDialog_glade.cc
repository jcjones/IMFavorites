// generated 2004/9/28 12:41:02 EDT by pug@resmiranda.berthall.com.(none)
// using glademm V2.0.0.1
//
// DO NOT EDIT THIS FILE ! It was created using
// glade-- imfavorites.glade --header-suffix .h
// for gtk 2.4.4 and gtkmm 2.2.11
//
// Please modify the corresponding derived classes in ./src/doneDialog.cc


#if defined __GNUC__ && __GNUC__ < 3
#error This program will crash if compiled with g++ 2.x
// see the dynamic_cast bug in the gtkmm FAQ
#endif //
#include "config.h"
/*
 * Standard gettext macros.
 */
#ifdef ENABLE_NLS
#  include <libintl.h>
#  undef _
#  define _(String) dgettext (GETTEXT_PACKAGE, String)
#  ifdef gettext_noop
#    define N_(String) gettext_noop (String)
#  else
#    define N_(String) (String)
#  endif
#else
#  define textdomain(String) (String)
#  define gettext(String) (String)
#  define dgettext(Domain,Message) (Message)
#  define dcgettext(Domain,Message,Type) (Message)
#  define bindtextdomain(Domain,Directory) (Domain)
#  define _(String) (String)
#  define N_(String) (String)
#endif
#include "doneDialog_glade.h"
#include <gdk/gdkkeysyms.h>
#include <gtkmm/accelgroup.h>
#include <gtkmm/button.h>
#include <gtkmm/buttonbox.h>
#include <gtkmm/image.h>
#include <gtkmm/box.h>

doneDialog_glade::doneDialog_glade(
)
{  doneDialog = this;
   gmm_data = new GlademmData(get_accel_group());
   
   Gtk::Button *cancelbutton1 = Gtk::manage(new class Gtk::Button(Gtk::StockID("gtk-close")));
   Gtk::Button *okbutton1 = Gtk::manage(new class Gtk::Button(Gtk::StockID("gtk-ok")));
   Gtk::Image *image3 = Gtk::manage(new class Gtk::Image(Gtk::StockID("gtk-dialog-info"), Gtk::IconSize(6)));
   doneDialogText = Gtk::manage(new class Gtk::Label(_("Text for Dialog of Completion...")));
   
   Gtk::HBox *hbox5 = Gtk::manage(new class Gtk::HBox(false, 0));
   cancelbutton1->set_flags(Gtk::CAN_FOCUS);
   cancelbutton1->set_relief(Gtk::RELIEF_NORMAL);
   okbutton1->set_flags(Gtk::CAN_FOCUS);
   okbutton1->set_relief(Gtk::RELIEF_NORMAL);
   doneDialog->get_action_area()->property_layout_style().set_value(Gtk::BUTTONBOX_END);
   image3->set_alignment(0.5,0.5);
   image3->set_padding(0,0);
   doneDialogText->set_alignment(0.5,0.5);
   doneDialogText->set_padding(0,0);
   doneDialogText->set_justify(Gtk::JUSTIFY_LEFT);
   doneDialogText->set_line_wrap(true);
   doneDialogText->set_use_markup(true);
   doneDialogText->set_selectable(false);
   hbox5->pack_start(*image3);
   hbox5->pack_start(*doneDialogText, Gtk::PACK_SHRINK, 0);
   doneDialog->get_vbox()->set_homogeneous(false);
   doneDialog->get_vbox()->set_spacing(0);
   doneDialog->get_vbox()->pack_start(*hbox5);
   doneDialog->set_title(_("Information"));
   doneDialog->set_modal(false);
   doneDialog->property_window_position().set_value(Gtk::WIN_POS_NONE);
   doneDialog->set_resizable(true);
   doneDialog->property_destroy_with_parent().set_value(false);
   doneDialog->set_has_separator(true);
   doneDialog->add_action_widget(*cancelbutton1, -7);
   doneDialog->add_action_widget(*okbutton1, -5);
   cancelbutton1->show();
   okbutton1->show();
   image3->show();
   doneDialogText->show();
   hbox5->show();
   doneDialog->show();
   cancelbutton1->signal_clicked().connect(SigC::slot(*this, &doneDialog_glade::on_doneDialog_close_clicked));
   cancelbutton1->signal_activate().connect(SigC::slot(*this, &doneDialog_glade::on_doneDialog_close_clicked));
   okbutton1->signal_clicked().connect(SigC::slot(*this, &doneDialog_glade::on_doneDialog_ok_clicked));
   okbutton1->signal_activate().connect(SigC::slot(*this, &doneDialog_glade::on_doneDialog_ok_clicked));
}

doneDialog_glade::~doneDialog_glade()
{  delete gmm_data;
}
