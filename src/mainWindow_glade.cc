// generated 2004/9/28 13:08:59 EDT by pug@resmiranda.berthall.com.(none)
// using glademm V2.0.0.1
//
// DO NOT EDIT THIS FILE ! It was created using
// glade-- imfavorites.glade --header-suffix .h
// for gtk 2.4.4 and gtkmm 2.2.11
//
// Please modify the corresponding derived classes in ./src/mainWindow.cc


#if defined __GNUC__ && __GNUC__ < 3
#error This program will crash if compiled with g++ 2.x
// see the dynamic_cast bug in the gtkmm FAQ
#endif //
#include "config.h"
/*
 * Standard gettext macros.
 */
#ifdef ENABLE_NLS
#  include <libintl.h>
#  undef _
#  define _(String) dgettext (GETTEXT_PACKAGE, String)
#  ifdef gettext_noop
#    define N_(String) gettext_noop (String)
#  else
#    define N_(String) (String)
#  endif
#else
#  define textdomain(String) (String)
#  define gettext(String) (String)
#  define dgettext(Domain,Message) (Message)
#  define dcgettext(Domain,Message,Type) (Message)
#  define bindtextdomain(Domain,Directory) (Domain)
#  define _(String) (String)
#  define N_(String) (String)
#endif
#include "mainWindow_glade.h"
#include <gdk/gdkkeysyms.h>
#include <gtkmm/accelgroup.h>
#include <gtkmm/label.h>
#include <gtkmm/box.h>
#include <gtkmm/radiobutton.h>
#include <gtkmm/adjustment.h>
#include <gtkmm/menuitem.h>
#include <gtkmm/menu.h>
#include <gtkmm/table.h>
#include <gtkmm/image.h>
#include <gtkmm/alignment.h>
#include <gtkmm/button.h>

mainWindow_glade::mainWindow_glade(
) : Gtk::Window(Gtk::WINDOW_TOPLEVEL)
{  mainWindow = this;
   gmm_data = new GlademmData(get_accel_group());
   
   Gtk::Label *label1 = Gtk::manage(new class Gtk::Label(_("Select your limiting\n"
		"options and press\n"
		"<span weight=\"bold\">Start</span> to link your \n"
		"favorite songs into\n"
		"your Target Directory.")));
   image1 = Gtk::manage(new class Gtk::Image(Gtk::StockID("gtk-cdrom"), Gtk::IconSize(4)));
   
   Gtk::VBox *vbox2 = Gtk::manage(new class Gtk::VBox(false, 0));
   Gtk::RadioButton::Group _RadioBGroup_sizeOtherRadio;
   sizeOtherRadio = Gtk::manage(new class Gtk::RadioButton(_RadioBGroup_sizeOtherRadio, _("_Other size (MB)"), true));
   
   Gtk::RadioButton::Group _RadioBGroup_limitSizeRadio;
   limitSizeRadio = Gtk::manage(new class Gtk::RadioButton(_RadioBGroup_limitSizeRadio, _("_Fit collection to a size"), true));
   sizeCDRadio = Gtk::manage(new class Gtk::RadioButton(_RadioBGroup_sizeOtherRadio, _("_CD (700 MB)"), true));
   sizeCD2Radio = Gtk::manage(new class Gtk::RadioButton(_RadioBGroup_sizeOtherRadio, _("CD (650 _MB)"), true));
   sizeDVDRadio = Gtk::manage(new class Gtk::RadioButton(_RadioBGroup_sizeOtherRadio, _("_DVD (4.7 GB)"), true));
   limitNumberRadio = Gtk::manage(new class Gtk::RadioButton(_RadioBGroup_limitSizeRadio, _("Pick a certain _number of songs"), true));
   
   Gtk::Adjustment *numSongsSpinButton_adj = Gtk::manage(new class Gtk::Adjustment(10, 1, 9999, 1, 10, 10));
   numSongsSpinButton = Gtk::manage(new class Gtk::SpinButton(*numSongsSpinButton_adj, 1, 0));
   
   Gtk::Label *label6 = Gtk::manage(new class Gtk::Label(_("<span weight=\"bold\">Limting Options</span>")));
   Gtk::Label *label5 = Gtk::manage(new class Gtk::Label(_("<span weight=\"bold\">Target Directory</span>")));
   directoryEntry = Gtk::manage(new class Gtk::Entry());
   
   Gtk::Adjustment *otherSizeSpinButton_adj = Gtk::manage(new class Gtk::Adjustment(180, 1, 9999, 10, 100, 10));
   otherSizeSpinButton = Gtk::manage(new class Gtk::SpinButton(*otherSizeSpinButton_adj, 1, 0));
   browseButton = Gtk::manage(new class Gtk::Button(_("_Browse"), true));
   
   Gtk::Label *label16 = Gtk::manage(new class Gtk::Label(_("")));
   Gtk::Label *label18 = Gtk::manage(new class Gtk::Label(_("Place symbolic links in...")));
   Gtk::Label *label19 = Gtk::manage(new class Gtk::Label(_("")));
   limitLengthRadio = Gtk::manage(new class Gtk::RadioButton(_RadioBGroup_limitSizeRadio, _("Fit collection to a _length"), true));
   
   Gtk::Adjustment *minutesSpinButton_adj = Gtk::manage(new class Gtk::Adjustment(80, 0, 9999, 1, 10, 10));
   minutesSpinButton = Gtk::manage(new class Gtk::SpinButton(*minutesSpinButton_adj, 1, 0));
   
   Gtk::Label *label20 = Gtk::manage(new class Gtk::Label(_(" minutes ")));
   Gtk::Adjustment *secondsSpinButton_adj = Gtk::manage(new class Gtk::Adjustment(0, 0, 59, 1, 10, 10));
   secondsSpinButton = Gtk::manage(new class Gtk::SpinButton(*secondsSpinButton_adj, 1, 0));
   
   Gtk::Label *label21 = Gtk::manage(new class Gtk::Label(_(" seconds ")));
   Gtk::HBox *hbox6 = Gtk::manage(new class Gtk::HBox(false, 0));
   cramCheckBox = Gtk::manage(new class Gtk::CheckButton(_("C_ram in as many songs\n"
		"as possible"), true));
   
   Gtk::MenuItem *all1 = NULL;
   Gtk::MenuItem *separator1 = NULL;
   mp3 = NULL;
   ogg_vorbis1 = NULL;
   windows_media1 = NULL;
   aac1 = NULL;
   Gtk::Menu *menu1 = Gtk::manage(new class Gtk::Menu());
   fileTypeOptionMenu = Gtk::manage(new class Gtk::OptionMenu());
   
   Gtk::Label *label22 = Gtk::manage(new class Gtk::Label(_("Only include these file types:")));
   Gtk::Table *table2 = Gtk::manage(new class Gtk::Table(2, 2, false));
   Gtk::HBox *hbox1 = Gtk::manage(new class Gtk::HBox(false, 0));
   Gtk::Image *image2 = Gtk::manage(new class Gtk::Image(Gtk::StockID("gtk-apply"), Gtk::IconSize(4)));
   Gtk::Label *label4 = Gtk::manage(new class Gtk::Label(_("_Start"), true));
   Gtk::HBox *hbox4 = Gtk::manage(new class Gtk::HBox(false, 2));
   Gtk::Alignment *alignment1 = Gtk::manage(new class Gtk::Alignment(0.5, 0.5, 0, 0));
   Gtk::Button *startButton = Gtk::manage(new class Gtk::Button());
   progressbar1 = Gtk::manage(new class Gtk::ProgressBar());
   
   Gtk::VBox *vbox1 = Gtk::manage(new class Gtk::VBox(false, 0));
   
   menu1->items().push_back(Gtk::Menu_Helpers::MenuElem(_("All")));
   all1 = (Gtk::MenuItem *)&menu1->items().back();
   
   menu1->items().push_back(Gtk::Menu_Helpers::SeparatorElem());
   separator1 = (Gtk::MenuItem *)&menu1->items().back();
   
   menu1->items().push_back(Gtk::Menu_Helpers::CheckMenuElem(_("Mp3")));
   mp3 = (Gtk::CheckMenuItem *)&menu1->items().back();
   
   menu1->items().push_back(Gtk::Menu_Helpers::CheckMenuElem(_("Ogg Vorbis")));
   ogg_vorbis1 = (Gtk::CheckMenuItem *)&menu1->items().back();
   
   menu1->items().push_back(Gtk::Menu_Helpers::CheckMenuElem(_("Windows Media")));
   windows_media1 = (Gtk::CheckMenuItem *)&menu1->items().back();
   
   menu1->items().push_back(Gtk::Menu_Helpers::CheckMenuElem(_("AAC")));
   aac1 = (Gtk::CheckMenuItem *)&menu1->items().back();
   label1->set_alignment(0.5,0.5);
   label1->set_padding(12,12);
   label1->set_justify(Gtk::JUSTIFY_FILL);
   label1->set_line_wrap(true);
   label1->set_use_markup(true);
   label1->set_selectable(false);
   image1->set_alignment(0.5,0.5);
   image1->set_padding(0,0);
   vbox2->pack_start(*label1, Gtk::PACK_SHRINK, 0);
   vbox2->pack_start(*image1);
   sizeOtherRadio->set_flags(Gtk::CAN_FOCUS);
   _tooltips.set_tip(*sizeOtherRadio, _("Enter another size (in Megabytes)"), "");
   sizeOtherRadio->set_border_width(4);
   sizeOtherRadio->set_relief(Gtk::RELIEF_NORMAL);
   sizeOtherRadio->set_mode(true);
   sizeOtherRadio->set_active(false);
   limitSizeRadio->set_flags(Gtk::CAN_FOCUS);
   _tooltips.set_tip(*limitSizeRadio, _("If you want to fit songs into a particular amount of space, use this option"), "");
   limitSizeRadio->set_relief(Gtk::RELIEF_NORMAL);
   limitSizeRadio->set_mode(true);
   limitSizeRadio->set_active(true);
   sizeCDRadio->set_flags(Gtk::CAN_FOCUS);
   _tooltips.set_tip(*sizeCDRadio, _("Fill a 80-minute CD-R"), "");
   sizeCDRadio->set_border_width(4);
   sizeCDRadio->set_relief(Gtk::RELIEF_NORMAL);
   sizeCDRadio->set_mode(true);
   sizeCDRadio->set_active(true);
   sizeCD2Radio->set_flags(Gtk::CAN_FOCUS);
   _tooltips.set_tip(*sizeCD2Radio, _("Fill a 74-minute CD-R"), "");
   sizeCD2Radio->set_border_width(4);
   sizeCD2Radio->set_relief(Gtk::RELIEF_NORMAL);
   sizeCD2Radio->set_mode(true);
   sizeCD2Radio->set_active(false);
   sizeDVDRadio->set_flags(Gtk::CAN_FOCUS);
   _tooltips.set_tip(*sizeDVDRadio, _("Fill a 120-minute DVD-R"), "");
   sizeDVDRadio->set_border_width(4);
   sizeDVDRadio->set_relief(Gtk::RELIEF_NORMAL);
   sizeDVDRadio->set_mode(true);
   sizeDVDRadio->set_active(false);
   limitNumberRadio->set_flags(Gtk::CAN_FOCUS);
   _tooltips.set_tip(*limitNumberRadio, _("If you only want your favorite 10, 15, or other number of songs, then use this option"), "");
   limitNumberRadio->set_relief(Gtk::RELIEF_NORMAL);
   limitNumberRadio->set_mode(true);
   limitNumberRadio->set_active(false);
   numSongsSpinButton->set_flags(Gtk::CAN_FOCUS);
   _tooltips.set_tip(*numSongsSpinButton, _("Number of songs in resulting collection"), "");
   numSongsSpinButton->set_update_policy(Gtk::UPDATE_ALWAYS);
   numSongsSpinButton->set_numeric(true);
   numSongsSpinButton->set_digits(0);
   numSongsSpinButton->set_wrap(false);
   label6->set_alignment(0,0.5);
   label6->set_padding(0,0);
   label6->set_justify(Gtk::JUSTIFY_LEFT);
   label6->set_line_wrap(false);
   label6->set_use_markup(true);
   label6->set_selectable(false);
   label5->set_alignment(0,0.5);
   label5->set_padding(0,0);
   label5->set_justify(Gtk::JUSTIFY_LEFT);
   label5->set_line_wrap(false);
   label5->set_use_markup(true);
   label5->set_selectable(false);
   directoryEntry->set_flags(Gtk::CAN_FOCUS);
   _tooltips.set_tip(*directoryEntry, _("The directory where all song symbolic links will be placed"), "");
   directoryEntry->set_visibility(true);
   directoryEntry->set_editable(true);
   directoryEntry->set_max_length(0);
   directoryEntry->set_text(_("~/mp3/favorites/"));
   directoryEntry->set_has_frame(true);
   directoryEntry->set_activates_default(false);
   otherSizeSpinButton->set_flags(Gtk::CAN_FOCUS);
   _tooltips.set_tip(*otherSizeSpinButton, _("Size in Megabytes of resulting collection"), "");
   otherSizeSpinButton->set_update_policy(Gtk::UPDATE_ALWAYS);
   otherSizeSpinButton->set_numeric(true);
   otherSizeSpinButton->set_digits(0);
   otherSizeSpinButton->set_wrap(false);
   browseButton->set_flags(Gtk::CAN_FOCUS);
   _tooltips.set_tip(*browseButton, _("Browse for a target directory"), "");
   browseButton->set_relief(Gtk::RELIEF_NORMAL);
   label16->set_size_request(20,-1);
   label16->set_alignment(0,0.5);
   label16->set_padding(0,0);
   label16->set_justify(Gtk::JUSTIFY_LEFT);
   label16->set_line_wrap(false);
   label16->set_use_markup(false);
   label16->set_selectable(false);
   label18->set_alignment(0,0.5);
   label18->set_padding(0,0);
   label18->set_justify(Gtk::JUSTIFY_LEFT);
   label18->set_line_wrap(false);
   label18->set_use_markup(false);
   label18->set_selectable(false);
   label19->set_size_request(20,-1);
   label19->set_alignment(0,0.5);
   label19->set_padding(0,0);
   label19->set_justify(Gtk::JUSTIFY_LEFT);
   label19->set_line_wrap(false);
   label19->set_use_markup(false);
   label19->set_selectable(false);
   limitLengthRadio->set_flags(Gtk::CAN_FOCUS);
   _tooltips.set_tip(*limitLengthRadio, _("If you want to fit everything onto a music CD or its like, choose this option"), "");
   limitLengthRadio->set_relief(Gtk::RELIEF_NORMAL);
   limitLengthRadio->set_mode(true);
   limitLengthRadio->set_active(false);
   minutesSpinButton->set_flags(Gtk::CAN_FOCUS);
   _tooltips.set_tip(*minutesSpinButton, _("Number of minutes to which the collection should be limited"), "");
   minutesSpinButton->set_update_policy(Gtk::UPDATE_ALWAYS);
   minutesSpinButton->set_numeric(true);
   minutesSpinButton->set_digits(0);
   minutesSpinButton->set_wrap(false);
   label20->set_alignment(0.5,0.5);
   label20->set_padding(0,0);
   label20->set_justify(Gtk::JUSTIFY_LEFT);
   label20->set_line_wrap(false);
   label20->set_use_markup(false);
   label20->set_selectable(false);
   secondsSpinButton->set_flags(Gtk::CAN_FOCUS);
   _tooltips.set_tip(*secondsSpinButton, _("Number of seconds to which the collection should be limited"), "");
   secondsSpinButton->set_update_policy(Gtk::UPDATE_ALWAYS);
   secondsSpinButton->set_numeric(true);
   secondsSpinButton->set_digits(0);
   secondsSpinButton->set_wrap(false);
   label21->set_alignment(0.5,0.5);
   label21->set_padding(0,0);
   label21->set_justify(Gtk::JUSTIFY_LEFT);
   label21->set_line_wrap(false);
   label21->set_use_markup(false);
   label21->set_selectable(false);
   hbox6->pack_start(*minutesSpinButton);
   hbox6->pack_start(*label20, Gtk::PACK_SHRINK, 0);
   hbox6->pack_start(*secondsSpinButton);
   hbox6->pack_start(*label21, Gtk::PACK_SHRINK, 0);
   cramCheckBox->set_flags(Gtk::CAN_FOCUS);
   _tooltips.set_tip(*cramCheckBox, _("Cram some small files into leftover space; with this enabled, some less-liked but shorter songs will be added to fill up remaining space in the collection"), "");
   cramCheckBox->set_border_width(4);
   cramCheckBox->set_relief(Gtk::RELIEF_NORMAL);
   cramCheckBox->set_mode(true);
   cramCheckBox->set_active(true);
   mp3->set_active(false);
   ogg_vorbis1->set_active(false);
   windows_media1->set_active(false);
   aac1->set_active(false);
   fileTypeOptionMenu->set_flags(Gtk::CAN_FOCUS);
   fileTypeOptionMenu->set_history(5);
   fileTypeOptionMenu->set_menu(*menu1);
   label22->set_alignment(0,0.5);
   label22->set_padding(0,0);
   label22->set_justify(Gtk::JUSTIFY_LEFT);
   label22->set_line_wrap(false);
   label22->set_use_markup(false);
   label22->set_selectable(false);
   table2->set_row_spacings(0);
   table2->set_col_spacings(0);
   table2->attach(*sizeOtherRadio, 2, 3, 9, 10, Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   table2->attach(*limitSizeRadio, 1, 4, 5, 6, Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   table2->attach(*sizeCDRadio, 2, 4, 6, 7, Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   table2->attach(*sizeCD2Radio, 2, 4, 7, 8, Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   table2->attach(*sizeDVDRadio, 2, 4, 8, 9, Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   table2->attach(*limitNumberRadio, 1, 4, 12, 13, Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   table2->attach(*numSongsSpinButton, 2, 4, 13, 14, Gtk::EXPAND|Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   table2->attach(*label6, 0, 4, 4, 5, Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   table2->attach(*label5, 0, 4, 0, 1, Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   table2->attach(*directoryEntry, 1, 3, 2, 3, Gtk::EXPAND|Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   table2->attach(*otherSizeSpinButton, 3, 4, 9, 10, Gtk::EXPAND|Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   table2->attach(*browseButton, 3, 4, 2, 3, Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   table2->attach(*label16, 1, 2, 3, 4, Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   table2->attach(*label18, 1, 4, 1, 2, Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   table2->attach(*label19, 0, 1, 3, 4, Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   table2->attach(*limitLengthRadio, 1, 4, 10, 11, Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   table2->attach(*hbox6, 2, 4, 11, 12, Gtk::FILL, Gtk::EXPAND|Gtk::FILL, 0, 0);
   table2->attach(*cramCheckBox, 1, 4, 18, 19, Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   table2->attach(*fileTypeOptionMenu, 2, 4, 16, 17, Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   table2->attach(*label22, 1, 4, 15, 16, Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   hbox1->pack_start(*vbox2);
   hbox1->pack_start(*table2, Gtk::PACK_EXPAND_WIDGET, 5);
   image2->set_alignment(0.5,0.5);
   image2->set_padding(0,0);
   label4->set_alignment(0.5,0.5);
   label4->set_padding(0,0);
   label4->set_justify(Gtk::JUSTIFY_LEFT);
   label4->set_line_wrap(false);
   label4->set_use_markup(false);
   label4->set_selectable(false);
   hbox4->pack_start(*image2, Gtk::PACK_SHRINK, 0);
   hbox4->pack_start(*label4, Gtk::PACK_SHRINK, 0);
   alignment1->add(*hbox4);
   startButton->set_flags(Gtk::CAN_FOCUS);
   _tooltips.set_tip(*startButton, _("Start symbolically linking"), "");
   startButton->set_border_width(4);
   startButton->set_relief(Gtk::RELIEF_NORMAL);
   startButton->add(*alignment1);
   _tooltips.set_tip(*progressbar1, _("Current progress"), "");
   vbox1->pack_start(*hbox1);
   vbox1->pack_start(*startButton, Gtk::PACK_SHRINK, 0);
   vbox1->pack_start(*progressbar1, Gtk::PACK_SHRINK, 0);
   mainWindow->set_border_width(2);
   mainWindow->set_title(_("IMMS Magical Favorites Collector"));
   mainWindow->set_modal(false);
   mainWindow->property_window_position().set_value(Gtk::WIN_POS_NONE);
   mainWindow->set_resizable(true);
   mainWindow->property_destroy_with_parent().set_value(false);
   mainWindow->add(*vbox1);
   label1->show();
   image1->show();
   vbox2->show();
   sizeOtherRadio->show();
   limitSizeRadio->show();
   sizeCDRadio->show();
   sizeCD2Radio->show();
   sizeDVDRadio->show();
   limitNumberRadio->show();
   numSongsSpinButton->show();
   label6->show();
   label5->show();
   directoryEntry->show();
   otherSizeSpinButton->show();
   browseButton->show();
   label16->show();
   label18->show();
   label19->show();
   limitLengthRadio->show();
   minutesSpinButton->show();
   label20->show();
   secondsSpinButton->show();
   label21->show();
   hbox6->show();
   cramCheckBox->show();
   all1->show();
   separator1->show();
   mp3->show();
   ogg_vorbis1->show();
   windows_media1->show();
   aac1->show();
   fileTypeOptionMenu->show();
   label22->show();
   table2->show();
   hbox1->show();
   image2->show();
   label4->show();
   hbox4->show();
   alignment1->show();
   startButton->show();
   progressbar1->show();
   vbox1->show();
   mainWindow->show();
   sizeOtherRadio->signal_toggled().connect(SigC::slot(*this, &mainWindow_glade::on_sizeOtherRadio_toggled));
   limitSizeRadio->signal_toggled().connect(SigC::slot(*this, &mainWindow_glade::on_limitRadio_toggled));
   sizeCDRadio->signal_toggled().connect(SigC::slot(*this, &mainWindow_glade::on_SizeCDRadio_toggled));
   sizeCD2Radio->signal_toggled().connect(SigC::slot(*this, &mainWindow_glade::on_sizeCD2Radio_toggled));
   sizeDVDRadio->signal_toggled().connect(SigC::slot(*this, &mainWindow_glade::on_sizeDVDRadio_toggled));
   limitNumberRadio->signal_toggled().connect(SigC::slot(*this, &mainWindow_glade::on_limitNumberRadio_toggled));
   numSongsSpinButton->signal_changed().connect(SigC::slot(*this, &mainWindow_glade::on_numSongsSpinButton_changed));
   browseButton->signal_activate().connect(SigC::slot(*this, &mainWindow_glade::on_browseButton_activate));
   browseButton->signal_clicked().connect(SigC::slot(*this, &mainWindow_glade::on_browseButton_activate));
   limitLengthRadio->signal_toggled().connect(SigC::slot(*this, &mainWindow_glade::on_limitLengthRadio_toggled));
   cramCheckBox->signal_toggled().connect(SigC::slot(*this, &mainWindow_glade::on_cramCheckBox_toggled));
   all1->signal_activate().connect(SigC::slot(*this, &mainWindow_glade::on_all1_activate));
   mp3->signal_activate().connect(SigC::slot(*this, &mainWindow_glade::on_mp3_activate));
   ogg_vorbis1->signal_activate().connect(SigC::slot(*this, &mainWindow_glade::on_ogg_vorbis1_activate));
   windows_media1->signal_activate().connect(SigC::slot(*this, &mainWindow_glade::on_windows_media1_activate));
   aac1->signal_activate().connect(SigC::slot(*this, &mainWindow_glade::on_aac1_activate));
   startButton->signal_activate().connect(SigC::slot(*this, &mainWindow_glade::on_startButton_activate));
   startButton->signal_clicked().connect(SigC::slot(*this, &mainWindow_glade::on_startButton_activate));
}

mainWindow_glade::~mainWindow_glade()
{  delete gmm_data;
}
